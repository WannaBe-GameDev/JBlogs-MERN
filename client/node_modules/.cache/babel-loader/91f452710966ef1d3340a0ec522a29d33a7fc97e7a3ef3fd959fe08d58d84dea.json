{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\MernProject\\\\client\\\\src\\\\pages\\\\LoginPage.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginPage() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  async function login(ev) {\n    ev.preventDefault();\n    const response = await fetch('http://localhost:4000/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        username,\n        password\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    });\n    if (response.status === 200) {\n      alert('Registation Successful');\n    } else {\n      alert('Registation Failed');\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lr\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"login\",\n      onSubmit: login,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Username\",\n        value: username,\n        onChange: ev => setUsername(ev.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: ev => setPassword(ev.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 7\n  }, this);\n}\n_s(LoginPage, \"wuQOK7xaXdVz4RMrZQhWbI751Oc=\");\n_c = LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","LoginPage","_s","username","setUsername","password","setPassword","login","ev","preventDefault","response","fetch","method","body","JSON","stringify","headers","credentials","status","alert","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/MernProject/client/src/pages/LoginPage.js"],"sourcesContent":["import { useState } from \"react\";\nexport default function LoginPage(){\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  async function login(ev){\n    ev.preventDefault();\n    const response = await fetch('http://localhost:4000/login',{\n      method: 'POST',\n      body: JSON.stringify({username,password}),\n      headers: {'Content-Type':'application/json'},\n      credentials: 'include',\n\n    });\n    if(response.status === 200) {\n      alert('Registation Successful');\n    } else {\n      alert('Registation Failed');\n    }\n\n  }\n    return(\n      <div className=\"lr\">\n        <form className=\"login\" onSubmit={login}>\n        <h1>Login</h1>\n        <input type=\"text\" placeholder=\"Username\" \n            value={username} \n            onChange={ev => setUsername(ev.target.value)}/>\n\n            <input type=\"password\" placeholder=\"Password\"\n            value={password} \n            onChange={ev => setPassword(ev.target.value)}/>\n            <button>Login</button>\n        </form>\n      </div>\n        \n    \n    );\n}"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACjC,eAAe,SAASC,SAASA,CAAA,EAAE;EAAAC,EAAA;EACjC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,eAAeS,KAAKA,CAACC,EAAE,EAAC;IACtBA,EAAE,CAACC,cAAc,CAAC,CAAC;IACnB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAC;MACzDC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACZ,QAAQ;QAACE;MAAQ,CAAC,CAAC;MACzCW,OAAO,EAAE;QAAC,cAAc,EAAC;MAAkB,CAAC;MAC5CC,WAAW,EAAE;IAEf,CAAC,CAAC;IACF,IAAGP,QAAQ,CAACQ,MAAM,KAAK,GAAG,EAAE;MAC1BC,KAAK,CAAC,wBAAwB,CAAC;IACjC,CAAC,MAAM;MACLA,KAAK,CAAC,oBAAoB,CAAC;IAC7B;EAEF;EACE,oBACEnB,OAAA;IAAKoB,SAAS,EAAC,IAAI;IAAAC,QAAA,eACjBrB,OAAA;MAAMoB,SAAS,EAAC,OAAO;MAACE,QAAQ,EAAEf,KAAM;MAAAc,QAAA,gBACxCrB,OAAA;QAAAqB,QAAA,EAAI;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACd1B,OAAA;QAAO2B,IAAI,EAAC,MAAM;QAACC,WAAW,EAAC,UAAU;QACrCC,KAAK,EAAE1B,QAAS;QAChB2B,QAAQ,EAAEtB,EAAE,IAAIJ,WAAW,CAACI,EAAE,CAACuB,MAAM,CAACF,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eAE/C1B,OAAA;QAAO2B,IAAI,EAAC,UAAU;QAACC,WAAW,EAAC,UAAU;QAC7CC,KAAK,EAAExB,QAAS;QAChByB,QAAQ,EAAEtB,EAAE,IAAIF,WAAW,CAACE,EAAE,CAACuB,MAAM,CAACF,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eAC/C1B,OAAA;QAAAqB,QAAA,EAAQ;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAIZ;AAACxB,EAAA,CApCuBD,SAAS;AAAA+B,EAAA,GAAT/B,SAAS;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}